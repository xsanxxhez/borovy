const { pool } = require('./config/database');
const fs = require('fs');
const path = require('path');

async function runMigrations() {
  try {
    console.log('üîÑ Running database migrations...');

    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, 'database_schema.sql');
    const schemaSQL = fs.readFileSync(schemaPath, 'utf8');

    console.log('üìã Executing schema...');

    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = schemaSQL.split(';').filter(query => query.trim());

    for (let i = 0; i < queries.length; i++) {
      const query = queries[i].trim();
      if (query) {
        console.log(`üìù Executing query ${i + 1}/${queries.length}...`);
        try {
          await pool.query(query);
          console.log(`‚úÖ Query ${i + 1} executed successfully`);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          if (!error.message.includes('already exists')) {
            console.log(`‚ö†Ô∏è  Query ${i + 1}: ${error.message}`);
          } else {
            console.log(`‚úÖ Query ${i + 1} (table already exists)`);
          }
        }
      }
    }

    console.log('üéâ Migrations completed!');

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
    console.log('\nüìä Checking created tables...');
    const tablesResult = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
    `);

    console.log('‚úÖ Available tables:');
    tablesResult.rows.forEach(table => {
      console.log(`   - ${table.table_name}`);
    });

  } catch (error) {
    console.error('‚ùå Migration error:', error);
  } finally {
    process.exit();
  }
}

runMigrations();